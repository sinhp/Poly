/-
Copyright (c) 2025 Sina Hazratpour. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: Sina Hazratpour
-/
import Mathlib.CategoryTheory.Comma.Over.Pullback
import Mathlib.CategoryTheory.Monoidal.Cartesian.Basic
import Mathlib.CategoryTheory.Limits.Constructions.Over.Basic
import Mathlib.CategoryTheory.Monad.Products
import Poly.ForMathlib.CategoryTheory.Comma.Over.Basic
import Poly.ForMathlib.CategoryTheory.NatTrans
import Poly.ForMathlib.CategoryTheory.Limits.Shapes.Pullback.CommSq

noncomputable section

universe v‚ÇÅ v‚ÇÇ u‚ÇÅ u‚ÇÇ

namespace CategoryTheory

open Category Limits Comonad MonoidalCategory CartesianMonoidalCategory

attribute [local instance] CartesianMonoidalCategory.ofFiniteProducts

variable {C : Type u‚ÇÅ} [Category.{v‚ÇÅ} C]

namespace Over

theorem cartesian_mapPullbackAdj_counit [HasPullbacks C] {X Y : C} (f : X ‚ü∂ Y) :
    NatTrans.cartesian (Over.mapPullbackAdj f).counit := by
  intro A B U
  apply IsPullback.of_right
    (h‚ÇÅ‚ÇÇ := Over.homMk (V := Over.mk f) (pullback.snd B.hom f) <| by simp)
    (v‚ÇÅ‚ÇÉ := Over.mkIdTerminal.from _)
    (h‚ÇÇ‚ÇÇ := Over.mkIdTerminal.from _)
  case p => ext; simp
  . apply (Over.forget Y).reflect_isPullback
    convert (IsPullback.of_hasPullback A.hom f).flip using 1 <;> simp
  . apply (Over.forget Y).reflect_isPullback
    convert (IsPullback.of_hasPullback B.hom f).flip using 1 <;> simp

/-- The reindexing of `Z : Over X` along `Y : Over X`, defined by pulling back `Z` along
`Y.hom : Y.left ‚ü∂ X`. -/
abbrev Reindex [HasPullbacks C] {X : C} (Y : Over X) (Z : Over X) : Over Y.left :=
  (Over.pullback Y.hom).obj Z

namespace Reindex

variable [HasPullbacks C] {X : C}

lemma hom {Y : Over X} {Z : Over X} :
    (Reindex Y Z).hom = pullback.snd Z.hom Y.hom := rfl

/-- `Reindex` is symmetric in its first and second arguments up to an isomorphism. -/
def symmetryObjIso (Y Z : Over X) :
    (Reindex Y Z).left ‚âÖ (Reindex Z Y).left := pullbackSymmetry _ _

/-- The reindexed sum of `Z` along `Y` is isomorphic to the reindexed sum of `Y` along `Z` in the
category `Over X`. -/
@[simps!]
def sigmaSymmetryIso (Y Z : Over X) :
  Sigma Y (Reindex Y Z) ‚âÖ Sigma Z (Reindex Z Y) := by
  apply Over.isoMk _ _
  ¬∑ exact pullbackSymmetry ..
  ¬∑ simp [pullback.condition]

lemma symmetry_hom {Y Z : Over X} :
    (pullback.snd Z.hom Y.hom) ‚â´ Y.hom =
    (pullbackSymmetry _ _).hom ‚â´ (pullback.snd Y.hom Z.hom) ‚â´ Z.hom  := by
  simp [‚Üê pullback.condition]

/-- The first projection out of the reindexed sigma object. -/
def fstProj (Y Z : Over X) : Sigma Y (Reindex Y Z) ‚ü∂ Y :=
  Over.homMk (pullback.snd Z.hom Y.hom) (by simp)

lemma fstProj_sigma_fst (Y Z : Over X) : fstProj Y Z = Sigma.fst (Reindex Y Z) := rfl

/-- The second projection out of the reindexed sigma object. -/
def sndProj (Y Z : Over X) : Sigma Y (Reindex Y Z) ‚ü∂ Z :=
  Over.homMk (pullback.fst Z.hom Y.hom) (by simp [pullback.condition])

/-- The notation for the first projection of the reindexed sigma object. -/
scoped notation " œÄ_ " => fstProj

/-- The notation for the second projection of the reindexed sigma object. -/
scoped notation " Œº_ " => sndProj

lemma counit_app_pullback_fst {Y Z : Over X} :
    Œº_ Y Z = (mapPullbackAdj Y.hom).counit.app Z := by
  simp [mapPullbackAdj_counit_app]
  rfl

lemma counit_app_pullback_snd {Y Z : Over X} :
    œÄ_ Y Z = (sigmaSymmetryIso Y Z).hom ‚â´ (mapPullbackAdj Z.hom).counit.app Y := by
  aesop

@[simp]
lemma counit_app_pullback_snd_eq_homMk {Y Z : Over X} :
    œÄ_ Y Z = (homMk (Reindex Y Z).hom : (Sigma Y (Reindex Y Z)) ‚ü∂ Y) :=
  OverMorphism.ext (by aesop)

end Reindex

section BinaryProduct

open Sigma Reindex

variable [HasFiniteWidePullbacks C] {X : C}

/-- The binary fan provided by `Œº_` and `œÄ_` is a binary product in `Over X`. -/
def isBinaryProductSigmaReindex (Y Z : Over X) :
    IsLimit <| BinaryFan.mk (P:= Sigma Y (Reindex Y Z)) (œÄ_ Y Z) (Œº_ Y Z) := by
  refine IsLimit.mk (?lift) ?fac ?uniq
  ¬∑ intro s
    fapply Over.homMk
    ¬∑ exact pullback.lift (s.œÄ.app ‚ü®.right‚ü©).left (s.œÄ.app ‚ü® .left ‚ü©).left (by aesop)
    ¬∑ aesop
  ¬∑ rintro s ‚ü®‚ü®l‚ü©|‚ü®r‚ü©‚ü© <;> apply Over.OverMorphism.ext <;> simp [Reindex.sndProj]
  ¬∑ intro s m h
    apply Over.OverMorphism.ext
    apply pullback.hom_ext <;> simp
    ¬∑ exact congr_arg CommaMorphism.left (h ‚ü® .right‚ü©)
    ¬∑ exact congr_arg CommaMorphism.left (h ‚ü® .left ‚ü©)

/-- The object `(Sigma Y) (Reindex Y Z)` is isomorphic to the binary product `Y √ó Z`
in `Over X`. -/
@[simps!]
def sigmaReindexIsoProd (Y Z : Over X) :
    (Sigma Y) (Reindex Y Z) ‚âÖ Limits.prod Y Z := by
  apply IsLimit.conePointUniqueUpToIso (isBinaryProductSigmaReindex Y Z) (prodIsProd Y Z)

/-- Given a morphism `f : X' ‚ü∂ X` and an object `Y` over `X`, the `(map f).obj ((pullback f).obj Y)`
is isomorphic to the binary product of `(Over.mk f)` and `Y`. -/
def sigmaReindexIsoProdMk {Y : C} (f : Y ‚ü∂ X) (Z : Over X) :
    (map f).obj ((pullback f).obj Z) ‚âÖ Limits.prod (Over.mk f) Z :=
  sigmaReindexIsoProd (Over.mk f) _

lemma sigmaReindexIsoProd_hom_comp_fst {Y Z : Over X} :
    (sigmaReindexIsoProd Y Z).hom ‚â´ fst Y Z = (œÄ_ Y Z) :=
  IsLimit.conePointUniqueUpToIso_hom_comp
    (isBinaryProductSigmaReindex Y Z) (Limits.prodIsProd Y Z) ‚ü®.left‚ü©

lemma sigmaReindexIsoProd_hom_comp_snd {Y Z : Over X} :
    (sigmaReindexIsoProd Y Z).hom ‚â´ snd Y Z = (Œº_ Y Z) :=
  IsLimit.conePointUniqueUpToIso_hom_comp
    (isBinaryProductSigmaReindex Y Z) (Limits.prodIsProd Y Z) ‚ü®.right‚ü©

end BinaryProduct

end Over

section TensorLeft

open Over Functor

variable [HasFiniteWidePullbacks C] {X : C}

/-- The pull-push composition `(Over.pullback Y.hom) ‚ãô (Over.map Y.hom)` is naturally isomorphic
to the left tensor product functor `Y √ó _` in `Over X`-/
def Over.sigmaReindexNatIsoTensorLeft (Y : Over X) :
    (pullback Y.hom) ‚ãô (map Y.hom) ‚âÖ tensorLeft Y := by
  fapply NatIso.ofComponents
  ¬∑ intro Z
    simp only [const_obj_obj, Functor.id_obj, comp_obj, Over.pullback]
    exact sigmaReindexIsoProd Y Z
  ¬∑ intro Z Z' f
    dsimp
    ext1 <;> simp_rw [assoc]
    ¬∑ rw [whiskerLeft_fst]
      iterate rw [sigmaReindexIsoProd_hom_comp_fst]
      ext
      simp
    ¬∑ rw [whiskerLeft_snd]
      iterate rw [sigmaReindexIsoProd_hom_comp_snd, ‚Üê assoc, sigmaReindexIsoProd_hom_comp_snd]
      ext
      simp [Reindex.sndProj]

lemma Over.sigmaReindexNatIsoTensorLeft_hom_app
    {Y : Over X} (Z : Over X) :
    (Over.sigmaReindexNatIsoTensorLeft Y).hom.app Z = (sigmaReindexIsoProd Y Z).hom := by
  aesop

end TensorLeft

variable (C)

/-- The functor from `C` to `Over (‚ä§_ C)` which sends `X : C` to `terminal.from X`. -/
@[simps! obj_left obj_hom map_left]
def Functor.toOverTerminal [HasTerminal C] : C ‚•§ Over (‚ä§_ C) where
  obj X := Over.mk (terminal.from X)
  map {X Y} f := Over.homMk f

/-- The slice category over the terminal object is equivalent to the original category. -/
def equivOverTerminal [HasTerminal C] : Over (‚ä§_ C) ‚âå C :=
  CategoryTheory.Equivalence.mk (Over.forget _) (Functor.toOverTerminal C)
    (NatIso.ofComponents (fun X => Over.isoMk (Iso.refl _)))
    (NatIso.ofComponents (fun X => Iso.refl _))

namespace Over

open CartesianMonoidalCategory

variable {C}

lemma star_map [HasBinaryProducts C] {X : C} {Y Z : C} (f : Y ‚ü∂ Z) :
    (star X).map f = Over.homMk (prod.map (ùüô X) f) (by aesop) := by
  simp [star]

/-- Note that the binary products assumption is necessary: the existence of a right adjoint to
`Over.forget X` is equivalent to the existence of each binary product `X ‚®Ø -`.
-/
instance [HasBinaryProducts C]  (X : C) : (forget X).IsLeftAdjoint  :=
  ‚ü®_, ‚ü®forgetAdjStar X‚ü©‚ü©

attribute [local instance] CartesianMonoidalCategory.ofFiniteProducts

lemma whiskerLeftProdMapId [HasFiniteLimits C] {X : C} {A A' : C} {g : A ‚ü∂ A'} :
    X ‚óÅ g = prod.map (ùüô X) g := by
  ext
  ¬∑ simp only [whiskerLeft_fst]
    exact (Category.comp_id _).symm.trans (prod.map_fst (ùüô X) g).symm
  ¬∑ simp only [whiskerLeft_snd]
    exact (prod.map_snd (ùüô X) g).symm

def starForgetIsoTensorLeft [HasFiniteLimits C] (X : C) :
    (Over.star X ‚ãô forget X) ‚âÖ tensorLeft X := by
  fapply NatIso.ofComponents
  ¬∑ intro Z
    exact Iso.refl _
  ¬∑ intro Z Z' f
    simp [whiskerLeftProdMapId]

namespace forgetAdjStar

variable [HasBinaryProducts C]

@[simp]
theorem unit_app {I : C} (X : Over I): (forgetAdjStar I).unit.app X =
    Over.homMk (prod.lift X.hom (ùüô X.left)) := by
  ext
  simp [forgetAdjStar, Adjunction.comp, Equivalence.symm]

@[simp]
theorem counit_app {I : C} (X : C) :
    ((forgetAdjStar I).counit.app X) = prod.snd := by
  simp [Over.forgetAdjStar, Adjunction.comp, Equivalence.symm]

@[simp]
theorem homEquiv_homMk_lift {I : C} {X : Over I} {A : C} {f : X.left ‚ü∂ A} :
    ((forgetAdjStar I).homEquiv X A) f =
    Over.homMk (prod.lift X.hom f) := by
  rw [Adjunction.homEquiv_unit, unit_app]
  ext
  simp

@[simp]
theorem homEquiv_left_lift {I : C} {X : Over I} {A : C} {f : X.left ‚ü∂ A} :
    (((forgetAdjStar I).homEquiv X A) f).left =
    prod.lift X.hom f := by
  simp_rw [homEquiv_homMk_lift]
  rfl

theorem homEquiv_lift' {X I : C} {u : X ‚ü∂ I} {A : C} {f : X ‚ü∂ A} :
    ((forgetAdjStar I).homEquiv (.mk u) A) f =
    Over.homMk (prod.lift u f) := by
  rw [Adjunction.homEquiv_unit, unit_app]
  ext
  simp

@[simp]
theorem homEquiv_symm_left_snd {I : C} {X : Over I} {A : C} {f : X ‚ü∂ (Over.star I).obj A} :
     ((forgetAdjStar I).homEquiv X A).symm f = f.left ‚â´ prod.snd := by
   rw [Adjunction.homEquiv_counit, counit_app]
   simp

end forgetAdjStar

end Over

namespace Adjunction

variable {C : Type u‚ÇÅ} [Category.{v‚ÇÅ} C] {D : Type u‚ÇÇ} [Category.{v‚ÇÇ} D]

/-- A right adjoint to the forward functor of an equivalence is naturally isomorphic to the
inverse functor of the equivalence. -/
def equivalenceRightAdjointIsoInverse (e : D ‚âå C) (R : C ‚•§ D) (adj : e.functor ‚ä£ R) :
    R ‚âÖ e.inverse :=
  conjugateIsoEquiv adj (e.toAdjunction) (Iso.refl _)

end Adjunction

namespace Over

/-- `star (‚ä§_ C) : C ‚•§ Over (‚ä§_ C)` is naturally isomorphic to `Functor.toOverTerminal C`. -/
def starIsoToOverTerminal [HasTerminal C] [HasBinaryProducts C] :
    star (‚ä§_ C) ‚âÖ Functor.toOverTerminal C := by
  apply Adjunction.equivalenceRightAdjointIsoInverse
    (equivOverTerminal C) (star (‚ä§_ C)) (forgetAdjStar (‚ä§_ C))

variable {C}

/-- A natural isomorphism between the functors `star X` and `star Y ‚ãô pullback f`
for any morphism `f : X ‚ü∂ Y`. -/
def starPullbackIsoStar [HasBinaryProducts C] [HasPullbacks C] {X Y : C} (f : X ‚ü∂ Y) :
    star Y ‚ãô pullback f ‚âÖ star X :=
  conjugateIsoEquiv ((mapPullbackAdj f).comp (forgetAdjStar Y)) (forgetAdjStar X) (mapForget f)

-- from Over.Basic
theorem iteratedSliceBackward_forget {X : C} (A : Over X) :
    iteratedSliceBackward A ‚ãô forget A = Over.map A.hom :=
  rfl

/-- The functor `Over.pullback f : Over Y ‚•§ Over X` is naturally isomorphic to
`Over.star : Over Y ‚•§ Over (Over.mk f)` post-composed with the
iterated slice equivlanece `Over (Over.mk f) ‚•§ Over X`. -/
def starIteratedSliceForwardIsoPullback [HasFiniteWidePullbacks C]
    {X Y : C} (f : X ‚ü∂ Y) : star (Over.mk f) ‚ãô (Over.mk f).iteratedSliceForward ‚âÖ pullback f :=
  conjugateIsoEquiv ((Over.mk f).iteratedSliceEquiv.symm.toAdjunction.comp (forgetAdjStar _))
  (mapPullbackAdj f) (eqToIso (iteratedSliceBackward_forget (Over.mk f)))

end Over

end CategoryTheory
